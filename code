print ("""
 _______________________________________________________________
|               |                                               |
|               |                                               |
|        _______|        ______________         _______         |
|       |                      |       |       |                |
|       |                      |       |       |                |
|       |        _______       |       |_______|         _______|
|               |       |      |                                |
|               |       |      |                                |
|_______        |       |______|        _______          _______|
|               |       |              |       |        |       |
|               |       |              |       |        |       |
|               |       |      END     |       |        |       |
|       |               |              |       |        |       |
|       |               |              |       |        |       |
|       |               |______________|       |        |       |
|       |       |                                               |
|       |       |                                               |
|       |       |______________________________                 |
|       |                                      |        |       |
|       |                                      |        |       |
|       |        _____________                 |        |       |
|       |                     |        |                |       |
| START |                     |        |                |       |
|_______|_____________________|________|________________|_______|
""")
class Node:
    def __init__(self, data):
        self.data = data
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

    def __repr__(self):
        return f"Node({self.data})"

class Tree:
    def __init__(self, root=None):
        self.root = root

    def print_tree(self, node=None, level=0):
      if node is None:
        node = self.root

      print("  " * level + str(node.data))
      for child in node.children:
        self.print_tree(child, level + 1)


# Create nodes
node00 = Node("0,0")
node01 = Node("0,1")
node02 = Node("0,2")
node03 = Node("0,3")
node04 = Node("0,4")
node05 = Node("0,5")
node06 = Node("0,6")
node07 = Node("0,7")
node11 = Node("1,1")
node12 = Node("1,2")
node13 = Node("1,3")
node14 = Node("1,4")
node15 = Node("1,5")
node16 = Node("1,6")
node17 = Node("1,7")
node21 = Node("2,1")
node22 = Node("2,2")
node23 = Node("2,3")
node24 = Node("2,4")
node25 = Node("2,5")
node26 = Node("2,6")
node27 = Node("2,7")
node31 = Node("3,1")
node32 = Node("3,2")
node33 = Node("3,3")
node34 = Node("3,4")
node35 = Node("3,5")
node36 = Node("3,6")
node37 = Node("3,7")
node41 = Node("4,1")
node42 = Node("4,2")
node43 = Node("4,3")
node44 = Node("4,4")
node45 = Node("4,5")
node46 = Node("4,6")
node47 = Node("4,7")
node51 = Node("5,1")
node52 = Node("5,2")
node53 = Node("5,3")
node54 = Node("5,4")
node55 = Node("5,5")
node56 = Node("5,6")
node57 = Node("5,7")
node61 = Node("6,1")
node62 = Node("6,2")
node63 = Node("6,3")
node64 = Node("6,4")
node65 = Node("6,5")
node66 = Node("6,6")
node67 = Node("6,7")
node71 = Node("7,1")
node72 = Node("7,2")
node73 = Node("7,3")
node74 = Node("7,4")
node75 = Node("7,5")
node76 = Node("7,6")
node77 = Node("7,7")
# Build tree structure
node00.add_child(node01)
node01.add_child(node02)
node02.add_child(node03)
node03.add_child(node04)
node04.add_child(node_f)

# Create the tree
tree = Tree(node00)

# Print the tree
tree.print_tree()
